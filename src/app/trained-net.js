
    let run = function nn(rawInput
    ) {
  
      var input = rawInput;
      var json = { "type": "RNNTimeStep", "options": { "inputSize": 1, "hiddenLayers": [20], "outputSize": 1, "decayRate": 0.999, "smoothEps": 1e-8, "regc": 0.000001, "clipval": 5 }, "hiddenLayers": [{ "weight": { "rows": 20, "columns": 1, "weights": { "0": 0.014204700477421284, "1": -0.009571844711899757, "2": -0.00660658348351717, "3": 0.010716619901359081, "4": 0.010435439646244049, "5": -0.00669433455914259, "6": -0.005854365415871143, "7": -0.01849389262497425, "8": -0.004109344910830259, "9": -0.029233496636152267, "10": 0.0024683210067451, "11": -0.00897092092782259, "12": -0.020897384732961655, "13": -0.006123855244368315, "14": 0.01223417092114687, "15": -0.004242337308824062, "16": -0.0022179693914949894, "17": -0.03241369500756264, "18": -0.0037935487926006317, "19": -0.034031547605991364 } }, "transition": { "rows": 20, "columns": 20, "weights": { "0": -0.009675165638327599, "1": -0.00519238505512476, "2": -0.0040425267070531845, "3": -0.00782542210072279, "4": 0.0007527496782131493, "5": 0.008376596495509148, "6": -0.003387225791811943, "7": 0.0005639986484311521, "8": 0.00513162137940526, "9": -0.004165275488048792, "10": 0.004324355628341436, "11": 0.008796806447207928, "12": 0.009720188565552235, "13": -0.0008316552266478539, "14": -0.0072844428941607475, "15": 0.001268961583264172, "16": 0.0014832562301307917, "17": -0.009383130818605423, "18": -0.002218150533735752, "19": -0.003065364668145776, "20": -0.006974453572183847, "21": 0.0027627248782664537, "22": -0.0022091863211244345, "23": 0.009459325112402439, "24": 0.008540873415768147, "25": 0.008513656444847584, "26": -0.00712925847619772, "27": -0.008938418701291084, "28": -0.007663407362997532, "29": -0.006952889263629913, "30": -0.0034201741218566895, "31": 0.001346985693089664, "32": -0.009741189889609814, "33": 0.009091483429074287, "34": -0.008317005820572376, "35": -0.005477622617036104, "36": -0.006607535295188427, "37": 0.002714414382353425, "38": -0.005542186554521322, "39": 0.0003316058136988431, "40": 0.006849535275250673, "41": -0.009186888113617897, "42": -0.007558001205325127, "43": 0.009328753687441349, "44": -0.006836981512606144, "45": 0.009560112841427326, "46": -0.007265322841703892, "47": -0.00549605255946517, "48": 0.0016158646903932095, "49": 0.004663474857807159, "50": -0.005049736704677343, "51": -0.0017290019895881414, "52": -0.009647760540246964, "53": 0.008082153275609016, "54": -0.0009166838135570288, "55": -0.0027217708993703127, "56": -0.0013906232779845595, "57": -0.00456387922167778, "58": -0.007234917022287846, "59": -0.002842342248186469, "60": -0.0005720662302337587, "61": -0.005006341263651848, "62": -0.0028955533634871244, "63": 0.00009940573363564909, "64": -0.0042636641301214695, "65": 0.008921188302338123, "66": -0.002580340253189206, "67": 0.0015173503197729588, "68": -0.00007368992373812944, "69": -0.007025266997516155, "70": -0.0037604770623147488, "71": -0.0023631970398128033, "72": 0.006698002107441425, "73": 0.0053207166492938995, "74": 0.00042220487375743687, "75": 0.004807892255485058, "76": 0.007644392549991608, "77": -0.009632756933569908, "78": -0.003691658843308687, "79": -0.0011549056507647038, "80": 0.005851915571838617, "81": 0.001663731411099434, "82": -0.0039630429819226265, "83": -0.0007383216870948672, "84": 0.005042801145464182, "85": 0.009161187335848808, "86": 0.0015050751389935613, "87": -0.005149897653609514, "88": 0.0074370503425598145, "89": -0.008283733390271664, "90": -0.005337020847946405, "91": -0.0053196563385427, "92": -0.005791404750198126, "93": -0.008062702603638172, "94": 0.00884757936000824, "95": -0.005163948517292738, "96": -0.008918441832065582, "97": 0.0015206868993118405, "98": -0.0019437249284237623, "99": 0.008610233664512634, "100": -0.007422286085784435, "101": -0.00977400317788124, "102": -0.0041364142671227455, "103": 0.007348671555519104, "104": 0.004856261890381575, "105": 0.002662488492205739, "106": -0.0016588415019214153, "107": 0.009014947339892387, "108": 0.004963002633303404, "109": -0.001183866523206234, "110": 0.0076105305925011635, "111": -0.00759328156709671, "112": -0.0035529981832951307, "113": 0.0018103031907230616, "114": 0.00418036850169301, "115": -0.009543703868985176, "116": 0.0006428860360756516, "117": 0.005996649153530598, "118": -0.007400776259601116, "119": 0.008642463944852352, "120": -0.008901391178369522, "121": 0.004724373109638691, "122": -0.0014882748946547508, "123": 0.006439222954213619, "124": -0.006518866866827011, "125": -0.0021963417530059814, "126": -0.0077252499759197235, "127": -0.0040765926241874695, "128": 0.007488246075809002, "129": -0.00009697971836430952, "130": 0.009665513411164284, "131": 0.007271213456988335, "132": -0.0019607101567089558, "133": 0.0016035065054893494, "134": -0.008287048898637295, "135": -0.004234378691762686, "136": -0.0029190778732299805, "137": -0.008799473755061626, "138": 0.009000465273857117, "139": 0.009522121399641037, "140": 0.0014919597888365388, "141": -0.009704852476716042, "142": -0.00048555241664871573, "143": -0.0025095937307924032, "144": -0.0017839809879660606, "145": 0.0038890200667083263, "146": -0.005215023644268513, "147": -0.007052528206259012, "148": 0.0026858465280383825, "149": 0.004839448258280754, "150": -0.005744882393628359, "151": 0.007819089107215405, "152": 0.0002034833305515349, "153": 0.0033062580041587353, "154": 0.008568496443331242, "155": 0.0010429121321067214, "156": 0.0003563944192137569, "157": -0.0007754572434350848, "158": 0.0029013671446591616, "159": 0.006627815775573254, "160": 0.0024864571169018745, "161": 0.004163505509495735, "162": -0.006974521558731794, "163": -0.009669496677815914, "164": 0.00353487441316247, "165": 0.008893903344869614, "166": 0.008349661715328693, "167": 0.0025372060481458902, "168": 0.005692278500646353, "169": -0.008135700598359108, "170": -0.0029182566795498133, "171": 0.008277874439954758, "172": 0.005713953170925379, "173": -0.00334346666932106, "174": 0.004406672902405262, "175": 0.006043947767466307, "176": 0.00009099244198296219, "177": -0.005671462509781122, "178": 0.0008858280489221215, "179": -0.003096009371802211, "180": 0.0017037272918969393, "181": 0.000696472532581538, "182": 0.008078502491116524, "183": -0.009131033904850483, "184": -0.0025469327811151743, "185": 0.006725682877004147, "186": 0.008664162829518318, "187": -0.0008257406298071146, "188": -0.0061032893136143684, "189": -0.007647505030035973, "190": -0.0006945542991161346, "191": -0.006407526321709156, "192": -0.00711341667920351, "193": -0.0011322650825604796, "194": -0.0009979229653254151, "195": 0.005990141537040472, "196": -0.003452388569712639, "197": 0.004083805251866579, "198": -0.002710557309910655, "199": 0.0019103649538010359, "200": 0.005450023338198662, "201": -0.00532724242657423, "202": 0.006874825805425644, "203": -0.00010809450759552419, "204": 0.005384617950767279, "205": 0.007596016861498356, "206": -0.003647826611995697, "207": 0.008091476745903492, "208": -0.0014219266595318913, "209": 0.009564409032464027, "210": 0.00852815993130207, "211": 0.00970102846622467, "212": -0.003975511994212866, "213": -0.007944505661725998, "214": 0.0007545524276793003, "215": -0.0011916066287085414, "216": -0.00682073226198554, "217": 0.0034296640660613775, "218": -0.00036033234209753573, "219": -0.004108640365302563, "220": -0.006266881711781025, "221": -0.004702230449765921, "222": -0.005947601981461048, "223": 0.0002613223041407764, "224": 0.00798299815505743, "225": 0.0010930593125522137, "226": 0.004874259699136019, "227": -0.007203696761280298, "228": -0.0026492092292755842, "229": 0.008377619087696075, "230": 0.0004964621621184051, "231": -0.0051135653629899025, "232": 0.008542333729565144, "233": 0.001918876776471734, "234": 0.0029005713295191526, "235": 0.0019446946680545807, "236": 0.004671706818044186, "237": -0.0035148626193404198, "238": -0.0051009394228458405, "239": 0.003937831614166498, "240": -0.009535657241940498, "241": 0.002608044072985649, "242": 0.008623688481748104, "243": -0.006824836600571871, "244": 0.009084132499992847, "245": -0.009121693670749664, "246": -0.009734242223203182, "247": 0.00778239918872714, "248": -0.0040497309528291225, "249": 0.005714590195566416, "250": 0.0007661208510398865, "251": -0.0011981262359768152, "252": 0.006240887567400932, "253": -0.004325383808463812, "254": 0.00023744962527416646, "255": -0.006246846169233322, "256": -0.009555933997035027, "257": -0.004631184972822666, "258": -0.005585888866335154, "259": 0.006372087635099888, "260": 0.001665276475250721, "261": -0.002484853146597743, "262": 0.0015759029192849994, "263": 0.0035847981926053762, "264": -0.004525773227214813, "265": -0.0009104538476094604, "266": 0.005306128412485123, "267": -0.002080065431073308, "268": -0.004832942970097065, "269": 0.004763903096318245, "270": -0.008196476846933365, "271": -0.005973707884550095, "272": -0.0003695912309922278, "273": 0.000708571111317724, "274": 0.008329447358846664, "275": 0.0011857408098876476, "276": -0.007761819753795862, "277": -0.005552110727876425, "278": -0.005975055042654276, "279": -0.0054958839900791645, "280": -0.006704788655042648, "281": 0.009784321300685406, "282": -0.00011027354776160792, "283": -0.0016455729492008686, "284": -0.0018103260081261396, "285": 0.008078736253082752, "286": -0.0042572347447276115, "287": 0.0061339810490608215, "288": 0.009027976542711258, "289": 0.003629059996455908, "290": -0.009414222091436386, "291": 0.0003655346226878464, "292": 0.0019443485653027892, "293": -0.00803192425519228, "294": 0.0001925707038026303, "295": 0.004189454484730959, "296": 0.0008050031028687954, "297": 0.003974441904574633, "298": 0.009764808230102062, "299": 0.0013414476998150349, "300": 0.0006834135274402797, "301": -0.002214448992162943, "302": -0.00047736818669363856, "303": -0.006689872592687607, "304": 0.0003725242568179965, "305": -0.004312815610319376, "306": 0.007614688016474247, "307": 0.009000623598694801, "308": 0.003275444731116295, "309": 0.007171505130827427, "310": -0.006262307055294514, "311": 0.0053825522772967815, "312": -0.00444252323359251, "313": 0.006689225789159536, "314": 0.006491628475487232, "315": -0.0027656403835862875, "316": 0.007567523047327995, "317": -0.002163264201954007, "318": -0.00234780739992857, "319": 0.00876360572874546, "320": 0.00700644263997674, "321": 0.00023121791309677064, "322": -0.005439334083348513, "323": 0.007633177563548088, "324": 0.006293033249676228, "325": -0.006166993174701929, "326": -0.00046405993634834886, "327": 0.0050192042253911495, "328": -0.004567235708236694, "329": -0.004023080691695213, "330": -0.004401464946568012, "331": -0.00835509318858385, "332": 0.004087114240974188, "333": -0.008644919842481613, "334": -0.005054291803389788, "335": 0.0018980670720338821, "336": -0.005069599021226168, "337": -0.0057527138851583, "338": -0.0048539042472839355, "339": -0.004792278632521629, "340": -0.0020073563791811466, "341": -0.007142941001802683, "342": 0.0009583886712789536, "343": -0.0044767484068870544, "344": -0.008737538009881973, "345": -0.005953286308795214, "346": 0.0008368095150217414, "347": 0.004762035794556141, "348": -0.0033733933232724667, "349": -0.003978918306529522, "350": 0.00394071638584137, "351": -0.009207235649228096, "352": 0.0022148131392896175, "353": 0.00403033709153533, "354": 0.008986821398139, "355": 0.0009846326429396868, "356": -0.004381056874990463, "357": -0.003378801280632615, "358": 0.005990811623632908, "359": 0.0040755365043878555, "360": 0.003216593060642481, "361": 0.00018587513477541506, "362": -0.007612246088683605, "363": 0.00811036117374897, "364": -0.004673680756241083, "365": 0.0031584196258336306, "366": 0.002550642704591155, "367": -0.009719761088490486, "368": -0.009617717936635017, "369": -0.006692592054605484, "370": -0.006578491069376469, "371": -0.009175142273306847, "372": 0.001105062197893858, "373": -0.0001829078100854531, "374": -0.005826684180647135, "375": 0.00404472416266799, "376": 0.002199135022237897, "377": 0.007854335010051727, "378": 0.0027278114575892687, "379": 0.0012274464825168252, "380": -0.009668909944593906, "381": -0.006621736101806164, "382": -0.004408815875649452, "383": 0.0013116349000483751, "384": -0.009319508448243141, "385": -0.008779829367995262, "386": 0.003594664391130209, "387": -0.0021078770514577627, "388": -0.006035042926669121, "389": 0.0012574938591569662, "390": 0.008689665235579014, "391": 0.001868678256869316, "392": -0.0025391140952706337, "393": -0.008440476842224598, "394": -0.0027743929531425238, "395": -0.005860719829797745, "396": 0.008939201012253761, "397": -0.0037771319039165974, "398": 0.005754541140049696, "399": -0.0030067996121942997 } }, "bias": { "rows": 20, "columns": 1, "weights": { "0": -1.4155300855636597, "1": 0, "2": 0, "3": -1.072351336479187, "4": -1.0501844882965088, "5": 0, "6": 0, "7": -0.038700833916664124, "8": 0, "9": -0.0386417880654335, "10": -0.2230931967496872, "11": 0, "12": -0.03869114816188812, "13": 0, "14": -1.217541217803955, "15": 0, "16": 0, "17": -0.03866589069366455, "18": 0, "19": -0.03765464946627617 } } }], "outputConnector": { "rows": 1, "columns": 20, "weights": { "0": 0.024704238399863243, "1": 0.0003805191663559526, "2": -0.0061214277520775795, "3": 0.016903450712561607, "4": 0.010089833289384842, "5": 0.0036104051396250725, "6": -0.0032676411792635918, "7": 0.03041267767548561, "8": 0.002555827610194683, "9": 0.015058811753988266, "10": 131.10011291503906, "11": 0.0051206969656050205, "12": 0.023837758228182793, "13": 0.0031392553355544806, "14": 0.010139652527868748, "15": 0.0023268451914191246, "16": -0.009041080251336098, "17": 0.03378130868077278, "18": -0.0011569606140255928, "19": 0.03751146048307419 } }, "output": { "rows": 1, "columns": 1, "weights": { "0": 0.4490267038345337 } }, "inputLookup": null, "inputLookupLength": null, "outputLookup": null, "outputLookupLength": null };
      var output = [];
      var states = [];
      var prevStates;
      var state;
      var max = input.length;
      for (var _i = 0; _i < max; _i++) {
        prevStates = states;
        states = [];
        states[0] = {
          name: 'forwardFn',
          left: null,
          right: null,
          product: new Matrix(1, 1)
        };
        states[1] = {
          name: 'multiply',
          left: json.hiddenLayers[0].weight,
          right: states[0].product,
          product: new Matrix(20, 1)
        };
        states[2] = {
          name: 'multiply',
          left: json.hiddenLayers[0].transition,
          right: typeof prevStates[5] === 'object' ? prevStates[5].product : new Matrix(20, 1),
          product: new Matrix(20, 1)
        };
        states[3] = {
          name: 'add',
          left: states[1].product,
          right: states[2].product,
          product: new Matrix(20, 1)
        };
        states[4] = {
          name: 'add',
          left: states[3].product,
          right: json.hiddenLayers[0].bias,
          product: new Matrix(20, 1)
        };
        states[5] = {
          name: 'relu',
          left: states[4].product,
          right: null,
          product: new Matrix(20, 1)
        };
        states[6] = {
          name: 'multiply',
          left: json.outputConnector,
          right: states[5].product,
          product: new Matrix(1, 1)
        };
        states[7] = {
          name: 'add',
          left: states[6].product,
          right: json.output,
          product: new Matrix(1, 1)
        };
        for (var stateIndex = 0, stateMax = 8; stateIndex < stateMax; stateIndex++) {
          state = states[stateIndex];
          var product = state.product;
          var left = state.left;
          var right = state.right;
  
          switch (state.name) {
            case 'forwardFn':
  
              product.weights = [input[_i]];
  
              break;
            case 'multiply': //compiled from src/recurrent/matrix/multiply.js
  
              const leftRows = left.rows;
              const leftColumns = left.columns;
              const rightColumns = right.columns;
  
              // loop over rows of left
              for (let leftRow = 0; leftRow < leftRows; leftRow++) {
                const leftRowBase = leftColumns * leftRow;
                const rightRowBase = rightColumns * leftRow;
                // loop over cols of right
                for (let rightColumn = 0; rightColumn < rightColumns; rightColumn++) {
                  // dot product loop
                  let dot = 0;
                  // loop over columns of left
                  for (let leftColumn = 0; leftColumn < leftColumns; leftColumn++) {
                    const rightColumnBase = rightColumns * leftColumn;
                    const leftIndex = leftRowBase + leftColumn;
                    const rightIndex = rightColumnBase + rightColumn;
                    dot += left.weights[leftIndex] * right.weights[rightIndex];
  
  
                  }
                  product.weights[rightRowBase + rightColumn] = dot;
                }
              }
  
              break;
            case 'add': //compiled from src/recurrent/matrix/add.js
  
              for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = left.weights[i] + right.weights[i];
  
              }
  
              break;
            case 'relu': //compiled from src/recurrent/matrix/relu.js
  
              for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = Math.max(0, left.weights[i]); // relu
  
              }
  
              break;
          }
        }
        output = state.product.weights;
      }
      return output[0];
  
  
  
      function Matrix(rows, columns) {
        this.rows = rows;
        this.columns = columns;
        this.weights = zeros(rows * columns);
      }
      function zeros(size) {
        return new Float32Array(size);
      }
      function softmax(m) {
        const result = new Matrix(m.rows, m.columns); // probability volume
        let maxVal = -999999;
        for (let i = 0; i < m.weights.length; i++) {
          if (m.weights[i] > maxVal) {
            maxVal = m.weights[i];
          }
        }
  
        let s = 0;
        for (let i = 0; i < m.weights.length; i++) {
          result.weights[i] = Math.exp(m.weights[i] - maxVal);
          s += result.weights[i];
        }
  
        for (let i = 0; i < m.weights.length; i++) {
          result.weights[i] /= s;
        }
  
        // no backward pass here needed
        // since we will use the computed probabilities outside
        // to set gradients directly on m
        return result;
      }
      function randomFloat(a, b) {
        return Math.random() * (b - a) + a;
      }
      function sampleI(m) {
        // sample argmax from w, assuming w are
        // probabilities that sum to one
        const r = randomFloat(0, 1);
        let x = 0;
        let i = 0;
        const w = m.weights;
  
        while (true) {
          x += w[i];
          if (x > r) {
            return i;
          }
          i++;
        }
      }
      function maxI(m) {
        // argmax of array w
        const { weights } = m;
        let maxv = weights[0];
        let maxix = 0;
        for (let i = 1; i < weights.length; i++) {
          const v = weights[i];
          if (v < maxv) continue;
  
          maxix = i;
          maxv = v;
        }
        return maxix;
      }
    }

  export { run }  